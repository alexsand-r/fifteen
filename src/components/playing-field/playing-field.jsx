import { useState, useEffect } from "react";
import Tile from "../tile/tile";

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–∑–¥–∞—é—â–∞—è —Ä–µ—à–∞–µ–º—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É
const shuffleSolvableArray = (array) => {
  let newArr = [...array];

  // –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—à–∞–µ–º–æ—Å—Ç—å
  for (let i = 0; i < 1000; i++) {
    const nullIndex = newArr.indexOf(null);
    const possibleMoves = [];

    // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
    if (nullIndex % 4 !== 0) possibleMoves.push(nullIndex - 1); // –í–ª–µ–≤–æ
    if (nullIndex % 4 !== 3) possibleMoves.push(nullIndex + 1); // –í–ø—Ä–∞–≤–æ
    if (nullIndex >= 4) possibleMoves.push(nullIndex - 4); // –í–≤–µ—Ä—Ö
    if (nullIndex < 12) possibleMoves.push(nullIndex + 4); // –í–Ω–∏–∑

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ –∏ –¥–≤–∏–≥–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
    const moveIndex =
      possibleMoves[Math.floor(Math.random() * possibleMoves.length)];
    [newArr[nullIndex], newArr[moveIndex]] = [
      newArr[moveIndex],
      newArr[nullIndex],
    ];
  }

  return newArr;
};

// –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–ª–∏—Ç–æ–∫, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É (null)
const initialTiles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, null];

function PlayingField({
  increaseStep,
  isRunning,
  setIsRunning,
  addResultToResultArr,
  setId,
}) {
  const [plates, setPlates] = useState(initialTiles);
  const [isGameWon, setIsGameWon] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–±–µ–¥—ã
  //—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä
  const startTimer = () => {
    setIsRunning(true); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
  };
  //—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä
  const stopTimer = () => {
    setIsRunning(false); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    setId((prevId) => prevId + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞
  };
  useEffect(() => {
    if (isGameWon) {
      stopTimer();
      addResultToResultArr();
    }
  }, [isGameWon]);

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–ª–∏—Ç–∫–∏
  useEffect(() => {
    const newPlates = shuffleSolvableArray(initialTiles);
    setPlates(newPlates);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
  const checkWin = (tiles) => {
    const winningOrder = [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      null,
    ];
    return tiles.every((tile, index) => tile === winningOrder[index]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–ª–∏—Ç–∫–µ
  const handleTileClick = (index) => {
    if (isGameWon) return; // –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

    const nullIndex = plates.indexOf(null);

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –∏ –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏
    const row = Math.floor(index / 4);
    const col = index % 4;
    const nullRow = Math.floor(nullIndex / 4);
    const nullCol = nullIndex % 4;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä—è–¥–æ–º –ª–∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    const isAdjacent =
      (Math.abs(row - nullRow) === 1 && col === nullCol) ||
      (Math.abs(col - nullCol) === 1 && row === nullRow);

    if (isAdjacent) {
      // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–ª–∏—Ç–∫—É –∏ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
      const newPlates = [...plates];
      [newPlates[index], newPlates[nullIndex]] = [
        newPlates[nullIndex],
        newPlates[index],
      ];
      setPlates(newPlates);
      increaseStep();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞
      if (checkWin(newPlates)) {
        console.log("–§–∏–Ω–∏—à! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ");
        setIsGameWon(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–±–µ–¥—ã

        return;
      }
    }
  };

  return (
    <section className="px-3">
      <div className="grid grid-cols-4 grid-rows-4 border-4 outline-6 outline-yellow-400 border-orange-800 rounded-lg bg-orange-800 w-[280px] h-[280px] 375:w-[350px] 375:h-[350px] gap-1">
        {plates.map((el, index) =>
          el !== null ? (
            <Tile
              key={index}
              number={el}
              onClick={() => {
                handleTileClick(index);
                startTimer();
              }}
              isGameWon={isGameWon} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–±–µ–¥—ã –≤ Tile
            />
          ) : (
            <div key={index} className="bg-transparent"></div>
          )
        )}
      </div>
    </section>
  );
}

export default PlayingField;
