import { useState, useEffect } from "react";
import { v4 as uuidv4 } from "uuid"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º uuid –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
import Tile from "../tile/tile";

function PlayingField({
  increaseStep,
  setIsRunning,
  addResultToResultArr,
  setId,
  plates,
  setPlates,
  openPopupResult,
  isGameWon,
  setIsGameWon,
}) {
  //—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä
  const startTimer = () => {
    setIsRunning(true); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
  };
  //—Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä
  const stopTimer = () => {
    setIsRunning(false); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    setId((prevId) => prevId + 1); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º ID –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞
  };

  // –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–æ–±–µ–¥—É
  useEffect(() => {
    if (isGameWon) {
      stopTimer();
      addResultToResultArr();
      openPopupResult();
    }
  }, [isGameWon]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
  const checkWin = (tiles) => {
    const winningOrder = [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      null,
    ];
    return tiles.every((tile, index) => tile === winningOrder[index]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–ª–∏—Ç–∫–µ
  const handleTileClick = (index) => {
    if (isGameWon) return; // –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤—ã–∏–≥—Ä–∞–Ω–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

    const nullIndex = plates.indexOf(null);

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –∏ –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏
    const row = Math.floor(index / 4);
    const col = index % 4;
    const nullRow = Math.floor(nullIndex / 4);
    const nullCol = nullIndex % 4;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä—è–¥–æ–º –ª–∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    const isAdjacent =
      (Math.abs(row - nullRow) === 1 && col === nullCol) ||
      (Math.abs(col - nullCol) === 1 && row === nullRow);

    if (isAdjacent) {
      // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–ª–∏—Ç–∫—É –∏ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
      const newPlates = [...plates];
      [newPlates[index], newPlates[nullIndex]] = [
        newPlates[nullIndex],
        newPlates[index],
      ];
      setPlates(newPlates);
      increaseStep();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞
      if (checkWin(newPlates)) {
        console.log("–§–∏–Ω–∏—à! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ");
        setIsGameWon(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–±–µ–¥—ã

        return;
      }
    }
  };

  return (
    <section className="px-3">
      <div className="grid grid-cols-4 grid-rows-4 border-4 outline-6 outline-yellow-400 border-orange-800 rounded-lg bg-orange-800 w-[280px] h-[280px] 375:w-[350px] 375:h-[350px] gap-1">
        {plates.map((el, index) =>
          el !== null ? (
            <Tile
              key={index} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–ª—é—á–∞ –ø–ª–∏—Ç–∫–∏
              number={el}
              onClick={() => {
                handleTileClick(index);
                startTimer();
              }}
              isGameWon={isGameWon}
            />
          ) : (
            <div key={`empty-${index}`} className="bg-transparent"></div> // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏
          )
        )}
      </div>
    </section>
  );
}

export default PlayingField;
