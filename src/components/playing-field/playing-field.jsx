import { useState, useEffect } from "react";
import Tile from "../tile/tile";

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –§–∏—à–µ—Ä–∞-–ô–µ—Ç—Å–∞ (Fisher-Yates)
const shuffleArray = (array) => {
  const newArr = [...array];
  for (let i = newArr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArr[i], newArr[j]] = [newArr[j], newArr[i]];
  }
  return newArr;
};

// –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–ª–∏—Ç–æ–∫, –≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É (null)
const initialTiles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, null];

function PlayingField() {
  const [plates, setPlates] = useState([]);

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–ª–∏—Ç–∫–∏
  useEffect(() => {
    setPlates(shuffleArray(initialTiles));
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
  const checkWin = (tiles) => {
    const winningOrder = [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      null,
    ];

    return tiles.every((tile, index) => tile === winningOrder[index]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–ª–∏—Ç–∫–µ
  const handleTileClick = (index) => {
    const nullIndex = plates.indexOf(null);

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –∏ –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏
    const row = Math.floor(index / 4);
    const col = index % 4;
    const nullRow = Math.floor(nullIndex / 4);
    const nullCol = nullIndex % 4;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä—è–¥–æ–º –ª–∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
    const isAdjacent =
      (Math.abs(row - nullRow) === 1 && col === nullCol) ||
      (Math.abs(col - nullCol) === 1 && row === nullRow);

    if (isAdjacent) {
      // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –ø–ª–∏—Ç–∫—É –∏ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
      const newPlates = [...plates];
      [newPlates[index], newPlates[nullIndex]] = [
        newPlates[nullIndex],
        newPlates[index],
      ];
      setPlates(newPlates);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∏–≥—Ä–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞
      if (checkWin(newPlates)) {
        console.log("–§–∏–Ω–∏—à! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ");
        alert("–§–∏–Ω–∏—à! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ"); // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
      }
    }
  };

  return (
    <section className="px-3">
      <div className="grid grid-cols-4 grid-rows-4 border-4 outline-6 outline-yellow-400 border-orange-800 rounded-lg bg-orange-800 w-[280px] h-[280px] 375:w-[350px] 375:h-[350px] gap-1">
        {plates.map((el, index) =>
          el !== null ? (
            <Tile
              key={index}
              number={el}
              onClick={() => handleTileClick(index)}
            />
          ) : (
            <div key={index} className="bg-transparent"></div>
          )
        )}
      </div>
    </section>
  );
}

export default PlayingField;
